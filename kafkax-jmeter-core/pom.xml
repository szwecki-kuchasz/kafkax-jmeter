<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>kafkax-jmeter</artifactId>
        <groupId>pl.w93c.kafkax-jmeter</groupId>
        <version>1.6.0</version>
    </parent>

    <artifactId>kafkax-jmeter-core</artifactId>
    <version>1.6.0</version>

    <name>kafkax-jmeter-core</name>

    <properties>
        <avro.version>1.8.2</avro.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.build.outputEncoding>UTF-8</project.build.outputEncoding>
        <jdk.version>1.8</jdk.version>
    </properties>

    <dependencies>

        <!-- JMeter Dependencies -->
        <dependency>
            <groupId>org.apache.jmeter</groupId>
            <artifactId>ApacheJMeter_core</artifactId>
            <version>5.3</version>
            <scope>provided</scope>
            <exclusions>
<!--                <exclusion>-->
<!--                    &lt;!&ndash; XXX 2.5.1 included transitively but not available in Maven &ndash;&gt;-->
<!--                    <groupId>com.fifesoft</groupId>-->
<!--                    <artifactId>rsyntaxtextarea</artifactId>-->
<!--                </exclusion>-->
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.apache.jmeter</groupId>
            <artifactId>ApacheJMeter_java</artifactId>
            <version>5.3</version>
            <scope>provided</scope>
            <exclusions>
<!--                <exclusion>-->
<!--                    &lt;!&ndash; XXX 2.5.1 included transitively but not available in Maven &ndash;&gt;-->
<!--                    <groupId>com.fifesoft</groupId>-->
<!--                    <artifactId>rsyntaxtextarea</artifactId>-->
<!--                </exclusion>-->
            </exclusions>
        </dependency>

        <!-- Kafka Dependencies -->

        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
            <version>2.6.0</version>
<!--            <version>0.9.0.1</version>-->
            <exclusions>
                <!-- XXX Transitively includes log4j 1.2.15 which has bad metadata
                     http://stackoverflow.com/a/9047963 -->
                <exclusion>
                    <groupId>com.sun.jmx</groupId>
                    <artifactId>jmxri</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.sun.jdmk</groupId>
                    <artifactId>jmxtools</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>javax.jms</groupId>
                    <artifactId>jms</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.apache.avro</groupId>
            <artifactId>avro</artifactId>
            <version>${avro.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/joda-time/joda-time -->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.10.6</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson... -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>2.11.3</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.11.3</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>2.11.3</version>
        </dependency>

    </dependencies>

    <build>
        <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
            <plugins>
                <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>
                <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.0</version>
                </plugin>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.22.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>
                <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
                <plugin>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.7.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-project-info-reports-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>8</source>
                    <target>8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>
                                <!-- common target directory of parent project-->
                                ${project.build.directory}/../../target/lib
                            </outputDirectory>
                            <includeScope>runtime</includeScope>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.avro</groupId>
                <artifactId>avro-maven-plugin</artifactId>
                <version>1.8.2</version>
                <!--global plugin configuration which used for run goal separately-->
                <configuration>
                    <!-- All fields declared in AVSC as "logicalType": "decimal" will be converted to BigDecimal fields in Java classes -->
                    <enableDecimalLogicalType>true</enableDecimalLogicalType>
                    <!--The Avro source directory for schema, protocol and IDL files.-->
                    <sourceDirectory>src/main/avro/</sourceDirectory>
                    <!--The directory where Avro writes code-generated sources. IMPORTANT!! -->
                    <outputDirectory>${project.basedir}/src/main/java/</outputDirectory>
                    <!--The input directory containing any Avro files used in testing.-->
                    <testSourceDirectory>${project.basedir}/src/test/avro/</testSourceDirectory>
                    <!--The output directory where Avro writes code-generated files for your testing purposes.-->
                    <testOutputDirectory>${project.basedir}/src/test/java/</testOutputDirectory>
                </configuration>
                <executions>
                    <execution>
                        <!--
                        IMPORTANT: Because this configuration is set in the execution with phase `generate-sources`.
                        So only run compile or package which include this phase will apply this configuration.
                        So if only make this configuration, run `mvn avro:schema` will only generate to the target
                        folder with default configuration.
                        -->
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>schema</goal>
                            <!--If you want to generate other code, need add more goals-->
                            <goal>protocol</goal>
                            <goal>idl-protocol</goal>
                        </goals>
                        <!---->
                        <configuration>
                            <!--default is ${basedir}/src/main/avro
                            The Avro source directory for schema, protocol and IDL files.-->
                            <sourceDirectory>src/main/avro/</sourceDirectory>

                            <!--default is ${project.build.directory}/generated-sources/avro
                             The directory where Avro writes code-generated sources. IMPORTANT!! -->
                            <outputDirectory>${project.basedir}/target/generated-sources/</outputDirectory>

                            <!--default is ${basedir}/src/test/avro
                            The input directory containing any Avro files used in testing.-->
                            <testSourceDirectory>src/test/resources/avro/</testSourceDirectory>

                            <!--default is ${project.build.directory}/generated-test-sources/avro
                            The output directory where Avro writes code-generated files for your testing purposes.-->
                            <testOutputDirectory>${project.basedir}/target/generated-test-sources/</testOutputDirectory>

                            <!--fieldVisibility PUBLIC_DEPRECATED
                            Determines the accessibility of fields (e.g. whether they are public or private).
                            Must be one of PUBLIC, PUBLIC_DEPRECATED or PRIVATE. PUBLIC_DEPRECATED merely
                            adds a deprecated annotation to each field, e.g. "@Deprecated public long time".-->


                            <!--In addition, the includes and testIncludes configurables can also be used to
                            specify alternative file extensions to the defaults, which are **/*.avsc, **/*.avpr
                            and **/*.avdl for schema, protocol and IDL files respectively.-->
                            <!--<includes>-->
                            <!--<include>**/*.av*</include>-->
                            <!--</includes>-->
                            <!--<testIncludes>-->
                            <!--<testInclude>**/*.test</testInclude>-->
                            <!--</testIncludes>>-->
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
